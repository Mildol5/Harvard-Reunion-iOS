#import "KGOCalendarGroup.h"
#import "KGOEvent.h"
#import "KGOEventCategory.h"
#import "CoreDataManager.h"
#import "Foundation+KGOAdditions.h"

NSString * const KGOEntityNameCalendarGroup = @"KGOCalendarGroup";

@implementation KGOCalendarGroup
@dynamic identifier;
@dynamic title;
@dynamic type;
@dynamic categories;
@dynamic sortOrder;

+ (KGOCalendarGroup *)groupWithDictionary:(NSDictionary *)aDict
{
    KGOCalendarGroup *group = nil;
    NSString *identifier = [aDict stringForKey:@"id" nilIfEmpty:YES];
    if (identifier) {
        group = [KGOCalendarGroup groupWithID:identifier];

        NSString *title = [aDict stringForKey:@"title" nilIfEmpty:YES];
        if (![group.title isEqualToString:title]) {
            group.title = title;
        }

        NSString *type = [aDict stringForKey:@"type" nilIfEmpty:YES];
        if (![group.type isEqualToString:type]) {
            group.type = type;
        }
        
        NSArray *calendars = [aDict arrayForKey:@"calendars"];
        if (calendars.count) {
            for (NSString *calendarID in calendars) {
                KGOEventCategory *aCategory = [KGOEventCategory categoryWithID:calendarID];
                if (aCategory) {
                    aCategory.group = group;
                }
            }
        }
    }
    
    return group;
}

+ (KGOCalendarGroup *)groupWithID:(NSString *)identifier
{
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"identifier like %@", identifier];
    KGOCalendarGroup *group = [[[CoreDataManager sharedManager] objectsForEntity:KGOEntityNameCalendarGroup
                                                               matchingPredicate:pred] lastObject];
    if (!group) {
        group = [[CoreDataManager sharedManager] insertNewObjectForEntityForName:KGOEntityNameCalendarGroup];
        group.identifier = identifier;
    }

    return group;
}



#pragma mark - Core data autogenerated methods


- (void)addCategoriesObject:(KGOEventCategory *)value {    
    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value count:1];
    [self willChangeValueForKey:@"categories" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
    [[self primitiveValueForKey:@"categories"] addObject:value];
    [self didChangeValueForKey:@"categories" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
    [changedObjects release];
}

- (void)removeCategoriesObject:(KGOEventCategory *)value {
    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value count:1];
    [self willChangeValueForKey:@"categories" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
    [[self primitiveValueForKey:@"categories"] removeObject:value];
    [self didChangeValueForKey:@"categories" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
    [changedObjects release];
}

- (void)addCategories:(NSSet *)value {    
    [self willChangeValueForKey:@"categories" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];
    [[self primitiveValueForKey:@"categories"] unionSet:value];
    [self didChangeValueForKey:@"categories" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];
}

- (void)removeCategories:(NSSet *)value {
    [self willChangeValueForKey:@"categories" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];
    [[self primitiveValueForKey:@"categories"] minusSet:value];
    [self didChangeValueForKey:@"categories" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];
}


@end
